#!/bin/bash

# "createme" script.

#  Copyright (c) 2010 Wind River Systems, Inc.

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

#  This script must be run from inside a Linux source directory

usage()
{
cat << EOF

    createme <arch> <branch> [defconfig]

EOF
}


if [ -z "$1" ]; then
	usage
	exit
fi

while [ $# -gt 0 ]; do
	case "$1" in
	    --help)
		usage
		exit
		;;
	    --force)
		force=t
		;;
	    -v) verbose=t
		;;
	    *) break
		;;
	esac
	shift
done

arch=$1
branch=$2
defconfig=$3 # might be empty
CURRENT=`git branch |grep \*|sed 's/^\* //'`

# Steal the wrs data off of the wrs_meta branch, but dont actually
# change wrs_meta in the process...
decheckpoint()
{

    # if there is an existing ./wrs we have to get it out of the way...
    rm -rf ./wrs

    TBRANCH=wrs_meta-$RANDOM
    git checkout -b $TBRANCH wrs_meta > /dev/null 2>&1
    if [ $? != 0 ]; then
	echo creation of temporary branch $TBRANCH failed
	echo check \"git status\" for possible reason why
	return 1
    fi

    merge_base=`git merge-base wrs_meta wrs_base`
    git reset --mixed $merge_base
    if [ $? != 0 ]; then
	echo Mixed reset on $TBRANCH failed
	return 1
    fi

    git checkout $CURRENT > /dev/null 2>&1
    if [ $? != 0 ]; then
	echo Switching back to $CURRENT \(with checkpoint data\) failed
	    return 1
    fi

    git branch -D $TBRANCH > /dev/null

    if [ ! -d $SCRIPT_DIR ]; then
	echo checkpoint restore failed, no dir $SCRIPT_DIR found
	return 1
    fi
}

gen_includes() {
    top_dir=$1

    potential=`find $top_dir -maxdepth 3 -type d -name kernel*cache`
    for dir in $potential; do
	includes="$include -I $dir"
    done

    echo $includes
}

# checks and sets
check_defconfig() {
	config=$1

	defconfig=`get_defconfig $arch $config`
}

do_compile_prep() {
    rm -f *.sco
}

do_compile() {
    top_dir=$1

    do_compile_prep
    includes=`gen_includes $top_dir`
    scc -o $ktgt $includes `pwd`/$ktgt.scc

    if [ -e "$ktgt" ]; then
	bash ./$ktgt > ../$ktgt-meta
    else
	echo "ERROR. Could not find an excutable target for $branch"
    fi
}

# checks and creates
check_branch() {
	branch=$1
	defconfig=$2

	ktgt=$branch

	git show-ref --quiet --verify -- "refs/heads/$branch"
	if [ $? -eq 1 ]; then
	    if [ -n "$verbose" ]; then
		echo "[INFO] branch $branch does not exist ... creating"
	    fi

	    mkdir -p wrs/cfg/meta/obj
	    old_pwd=`pwd`

	    cd wrs/cfg/meta/obj

	    echo "branch $ktgt" > $ktgt.scc
	    if [ ! -f $defconfig ]; then
		cp -f $defconfig .
	    fi

	    echo "kconf hardware `basename $defconfig`" >> $ktgt.scc
	    (cd $old_pwd; find -name 'Kconfig' | sed 's/^.\///' > wrs/cfg/meta/obj/hardware.kcf)

	    do_compile $old_pwd
	fi
}


decheckpoint
check_defconfig $defconfig
check_branch $branch $defconfig